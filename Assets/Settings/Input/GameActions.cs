//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/Input/GameActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameActions"",
    ""maps"": [
        {
            ""name"": ""UI_ActionMap"",
            ""id"": ""9f7d1cbd-886d-4af8-a301-21fc09c125e2"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""5d8d3746-6834-4be4-a130-1d307229ac9d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""9e006274-27cd-4432-9836-17f2733668f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""edb724bc-11a5-4151-97b1-7c50e125d323"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""db7963c1-a338-45cd-8bc3-3d7d92c271a1"",
                    ""path"": ""<HID::MY-POWER CO.,LTD. USB Joystick>/button2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // UI_ActionMap
        m_UI_ActionMap = asset.FindActionMap("UI_ActionMap", throwIfNotFound: true);
        m_UI_ActionMap_Pause = m_UI_ActionMap.FindAction("Pause", throwIfNotFound: true);
        m_UI_ActionMap_Newaction = m_UI_ActionMap.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UI_ActionMap
    private readonly InputActionMap m_UI_ActionMap;
    private List<IUI_ActionMapActions> m_UI_ActionMapActionsCallbackInterfaces = new List<IUI_ActionMapActions>();
    private readonly InputAction m_UI_ActionMap_Pause;
    private readonly InputAction m_UI_ActionMap_Newaction;
    public struct UI_ActionMapActions
    {
        private @GameActions m_Wrapper;
        public UI_ActionMapActions(@GameActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_UI_ActionMap_Pause;
        public InputAction @Newaction => m_Wrapper.m_UI_ActionMap_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_UI_ActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UI_ActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IUI_ActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_UI_ActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UI_ActionMapActionsCallbackInterfaces.Add(instance);
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IUI_ActionMapActions instance)
        {
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IUI_ActionMapActions instance)
        {
            if (m_Wrapper.m_UI_ActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUI_ActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_UI_ActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UI_ActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UI_ActionMapActions @UI_ActionMap => new UI_ActionMapActions(this);
    public interface IUI_ActionMapActions
    {
        void OnPause(InputAction.CallbackContext context);
        void OnNewaction(InputAction.CallbackContext context);
    }
}
